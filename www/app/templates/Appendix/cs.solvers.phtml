{block #title}Solvers{/block}
{block #chapter}A.{/block}
{block #content}

<h3>Seznam všech solverů v JCOPu</h3>

<p>
  V <a href="#table-1">tabulce 1</a> je seznam všech solverů dodávaných s JCOPem, společně s krátkým popisem a výchozími
  registrovanými rendery (navíc k {javadoc "result.render.SimpleRender"}, který je výchozí pro každý solver). Přidáním
  renderu do solveru se použijí pouze přidané rendery, nikoli výchozí. Všechny solvery zde uvedené jsou potomky {javadoc "solver.BaseSolver"}.
</p>

<table class="full" id="table-1">
  <tr>
    <th>Jméno</th>
    <th>Popis</th>
    <th>Další rendery</th>
  </tr>
  <tr>
    <td><a href="#algorithm-compare-solver">AlgorithmCompareSolver</a></td>
    <td>Spustí několik algoritmů na stejném problému.</td>
    <td>{javadoc "result.render.SimpleCompareRender"}</td>
  </tr>
  <tr>
    <td><a href="#median-solver">MedianSolver</a></td>
    <td>Vezme jiný solver, celý ho několikrát pustí a poté vezme medián z jeho výsledků.</td>
    <td>{javadoc "result.render.SimpleCompareRender"}</td>
  </tr>
  <tr>
    <td><a href="#multi-solver">MultiSolver</a></td>
    <td>Provede kartézský součin daných algoritmů a problémů a provede všechny tyto kombinace.</td>
    <td>{javadoc "result.render.SimpleCompareRender"}</td>
  </tr>
  <tr>
    <td><a href="#problem-compare-solver">ProblemCompareSolver</a></td>
    <td>Spustí jeden algoritmus na více problémech.</td>
    <td>{javadoc "result.render.SimpleCompareRender"}</td>
  </tr>
  <tr>
    <td><a href="#simple-solver">SimpleSolver</a></td>
    <td>Spustí jeden algoritmus na jednom problému.</td>
    <td>žádné</td>
  </tr>
</table>
<p class="fig-title">Table 1: Seznam všech solverů v JCOPu.</p>

<h3 id="algorithm-compare-solver">AlgorithmCompareSolver</h3>

<p>
  {javadoc "solver.AlgorithmCompareSolver"} je vytvořen s jedním problémem a více algoritmy. Další algoritmy lze přidat
  metodou {javadoc "solver.AlgorithmCompareSolver#addAlgorithm(cz.cvut.felk.cig.jcop.algorithm.Algorithm)"}. Solver
  použije postupně každý algoritmus na zadaný problém. Výchozí rendery má {javadoc "result.render.SimpleRender"} a
  {javadoc "result.render.SimpleCompareRender"}.
</p>

<h3 id="median-solver">MedianSolver</h3>

<p>
  {javadoc "solver.MedianSolver"} je zcela jiný než ostatní solvery. Nepracuje sám o sobě, ale jako vstupní parametr
  bere jiný solver, který poté opakovaně pouští a uchovává výsledky z každého běhu. Poté provede medián výsledků (které
  jsou seřazeny podle fitness) a toto prezentuje jako výsledek. Tento solver je velmi užitečný pro algoritmy, které
  pracují s náhodou, protože do značné míry eliminuje statistické chyby.
</p>

<p>
  Upozornění: pokud dodaný solver vrací více jak jeden záznam výsledku, MedianSolver vyžaduje, aby při každém běhu tento
  solver vrátil přesně stejný počet záznamů výsledku a ve stejném pořadí.
</p>

<p>
  {javadoc "solver.MedianSolver"} má výchozí rendery {javadoc "result.render.SimpleRender"} a
  {javadoc "result.render.SimpleCompareRender"}.
</p>

<h3 id="multi-solver">MultiSolver</h3>

<p>
  {javadoc "solver.MultiSolver"} je vytvořen se seznamem algoritmů a seznamem problémů. Více algoritmů i problémů lze
  přidat metodou {javadoc "solver.MultiSolver#addAlgorithm(cz.cvut.felk.cig.jcop.algorithm.Algorithm)"} a
  {javadoc "solver.MultiSolver#addProblem(cz.cvut.felk.cig.jcop.problem.Problem)"}. Solver vytváří kartézský součin,
  tzn. aplikuje každý algoritmus postupně na každý problém. Má výchozí rendery {javadoc "result.render.SimpleRender"} a
  {javadoc "result.render.SimpleCompareRender"}.
</p>

<h3 id="problem-compare-solver">ProblemCompareSolver</h3>

<p>
  {javadoc "solver.ProblemCompareSolver"} požaduje na vstupu jeden algoritmus a několik problémů. Další problémy lze
  dodat pomocí {javadoc "solver.ProblemCompareSolver#addProblem(cz.cvut.felk.cig.jcop.problem.Problem)"}. Solver postupně
  aplikuje zadaný algoritmus na každý problém. Má výchozí rendery {javadoc "result.render.SimpleRender"} a
  {javadoc "result.render.SimpleCompareRender"}.
</p>

<h3 id="simple-solver">SimpleSolver</h3>

<p>
  {javadoc "solver.SimpleSolver"} je vhodný na jednoduché testování, jestli algoritmus nebo problém fungují správně.
  Používá pouze jeden algoritmus a jeden problém a udělá právě jednu iteraci solveru. Má výchozí render {javadoc "result.render.SimpleRender"}.
</p>
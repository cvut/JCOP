{block #title}Stop Conditions{/block}
{block #chapter}D.{/block}
{block #content}

<h3>Seznam všech ukončovacích podmínek v JCOPu</h3>

<p>
  V <a href="#table-1">tabulce 1</a> je seznam všech ukončovacích podmínek dodávaných s JCOPem, společně s popisem kdy
  jsou splněny a jaké přijímají zprávy. Všechny zde uvedené podmínky dědí z {javadoc "solver.condition.BaseCondition"}.
</p>

<table class="full" id="table-1">
  <tr>
    <th>Jméno</th>
    <th>Splněna</th>
    <th>Přijímané zprávy</th>
  </tr>
  <tr>
    <td><a href="#and-condition">AndCondition</a></td>
    <td>všechny podpodmínky jsou splněny</td>
    <td>žádné</td>
  </tr>
  <tr>
    <td><a href="#found-solution-condition">FoundSolutionCondition</a></td>
    <td>{javadoc "solver.message.MessageSolutionFound"} přijata</td>
    <td>{javadoc "solver.message.MessageSolverStart"}<br/>{javadoc "solver.message.MessageSolutionFound"}</td>
  </tr>
  <tr>
    <td><a href="#iteration-condition">IterationCondition</a></td>
    <td>{javadoc "solver.message.MessageOptimize"} přijata daný počet kroků</td>
    <td>{javadoc "solver.message.MessageSolverStart"}<br/>{javadoc "solver.message.MessageOptimize"}</td>
  </tr>
  <tr>
    <td><a href="#or-condition">OrCondition</a></td>
    <td>libovolná dílčí podmínka je splněna</td>
    <td>žádné</td>
  </tr>
  <tr>
    <td><a href="#timeout-condition">TimeoutCondition</a></td>
    <td>CPU time solveru nabyl dostatečné hodnoty</td>
    <td>{javadoc "solver.message.MessageSolverStart"}</td>
  </tr>
</table>
<p class="fig-title">Table 1: Seznam všech ukončovacích podmínek v JCOPu.</p>

<h3 id="and-condition">AndCondition</h3>

<p>
  {javadoc "solver.condition.AndCondition"} se používá na vytváření komplexních podmínek. Může v sobě obsahovat
  libovolné množství dalších ukončovacích podmínek (dodané buď v konstruktoru nebo voláním {javadoc "solver.condition.AndCondition#addStopCondition(cz.cvut.felk.cig.jcop.solver.condition.StopCondition)"}).
  Kdykoli je podmínka vyhodnocena, vrací pravdu právě kdy6 žádná dílčí ukončovací podmínka nevrací nepravdu. Nepřijímá
  žádné zprávy.
</p>

<h3 id="found-solution-condition">FoundSolutionCondition</h3>

<p>
  {javadoc "solver.condition.FoundSolutionCondition"} vrací pravdu pokud bylo nalezeno alespoň jedno řešení (řešení je
  taková konfigurace, pro kterou {javadoc "problem.Problem#isSolution(cz.cvut.felk.cig.jcop.problem.Configuration)"}
  vrací pravdu). Přijímá zprávu {javadoc "solver.message.MessageSolverStart"} na resetování svého stavu a
  {javadoc "solver.message.MessageSolutionFound"} jako notifikaci že bylo nalezeno řešení.
</p>

<h3 id="iteration-condition">IterationCondition</h3>

<p>
  {javadoc "solver.condition.IterationCondition"} počítá kolik optimalizačních kroků proběhlo v iteraci solveru. Jakmile
  je dosaženo zadané hranice, vrací pravdu. Přijímá zprávu {javadoc "solver.message.MessageOptimize"} na zvýšení
  interního čítače a {javadoc "solver.message.MessageSolverStart"} na jeho nastavení na nulu.
</p>

<h3 id="or-condition">OrCondition</h3>

<p>
  {javadoc "solver.condition.OrCondition"} se používá na vytváření komplexních podmínek. Může v sobě obsahovat
  libovolné množství dalších ukončovacích podmínek (dodané buď v konstruktoru nebo voláním {javadoc "solver.condition.OrCondition#addStopCondition(cz.cvut.felk.cig.jcop.solver.condition.StopCondition)"}).
  Kdykoli je podmínka vyhodnocena, vrací pravdu pokud alespoň jedna dílčí ukončovací podmínka vrací nepravdu. Nepřijímá
  žádné zprávy.
</p>

<h3 id="timeout-condition">TimeoutCondition</h3>

<p>
  {javadoc "solver.condition.TimeoutCondition"} omezuje jak dlouho může jedna iterace solveru běžet. Omezení se udává v
  milisekundách a je předáván v konstruktoru. Používá {javadoc "util.PreciseTime#getCpuTimeMili()"} na získání CPU time.
  Vrací pravdu pokud již daný čas uplynul. Přijímá {javadoc "solver.message.MessageSolverStart"} pro restartování čítače
  času.
</p>
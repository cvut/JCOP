{block #title}Renders, Listeners{/block}
{block #chapter}E.{/block}
{block #content}

<h3>List of all renders and listeners in JCOP</h3>

<p>
  In <a href="#table-1">table 1</a> is a list of all renders and listeners bundled with JCOP, along with destination
  media, type and how they format results.
</p>

<table class="full" id="table-1">
  <tr>
    <th>Name</th>
    <th>Type</th>
    <th>Format description</th>
    <th>Media</th>
  </tr>
  <tr>
    <td><a href="#csv-render">CSVRender</a></td>
    <td>Render</td>
    <td>Creates <abbr title="Comma-separated values">CSV</abbr> using <a href="http://sourceforge.net/projects/javacsv/">JavaCSV</a>
    library.</td>
    <td>
      <a href="http://java.sun.com/javase/6/docs/api/java/io/OutputStream.html">java.io.OutputStream</a><br />
      <a href="http://java.sun.com/javase/6/docs/api/java/io/File.html">java.io.File</a><br />
      <a href="http://java.sun.com/javase/6/docs/api/java/lang/System.html#out">System.out</a> (console)
    </td>
  </tr>
  <tr>
    <td><a href="#exception-render">ExceptionRender</a></td>
    <td>Render</td>
    <td>Prints only exceptions for results, but with their full stack trace.</td>
    <td>
      <a href="http://java.sun.com/javase/6/docs/api/java/lang/System.html#out">System.out</a> (console)
    </td>
  </tr>
  <tr>
    <td><a href="#jfree-chart-render">JFreeChartRender</a></td>
    <td>Listener</td>
    <td>Creates chart with on-the-fly results, each solver iteration has its own plot line.</td>
    <td>
      <a href="http://java.sun.com/javase/6/docs/api/javax/swing/JFrame.html">JFrame</a>
    </td>
  </tr>
  <tr>
    <td><a href="#simple-compare-render">SimpleCompareRender</a></td>
    <td>Render</td>
    <td>
      Sorts result entries by fitness (descending) and by optimize counter (ascending), prints two tables with problem,
      algorithm and either fitness or optimize counter. Useful for quick comparison of different algorithms/settings.
    </td>
    <td>
      <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintStream.html">java.io.PrintStream</a><br />
      <a href="http://java.sun.com/javase/6/docs/api/java/io/File.html">java.io.File</a><br />
      <a href="http://java.sun.com/javase/6/docs/api/java/lang/System.html#out">System.out</a> (console)
    </td>
  </tr>
  <tr>
    <td><a href="#simple-render">SimpleRender</a></td>
    <td>Render</td>
    <td>
      Prints various levels of text information about result entries.
    </td>
    <td>
      <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintStream.html">java.io.PrintStream</a><br />
      <a href="http://java.sun.com/javase/6/docs/api/java/io/File.html">java.io.File</a><br />
      <a href="http://java.sun.com/javase/6/docs/api/java/lang/System.html#out">System.out</a> (console)
    </td>
  </tr>
  <tr>
    <td><a href="#xml-render">XMLRender</a></td>
    <td>Render</td>
    <td>
      Creates XML file with rich information about each result entry.
    </td>
    <td>
      <a href="http://java.sun.com/javase/6/docs/api/java/io/File.html">java.io.File</a>
    </td>
  </tr>
</table>
<p class="fig-title">Table 1: List of renders and listeners in JCOP.</p>

<h3 id="csv-render">CSVRender</h3>

<p>
  {javadoc "result.render.CSVRender"} creates CSV output, one line with headers and then one line for every result
  entry. Note that by default it uses comma (",") as delimiter and utf-8 encoding, both incompatible with Microsoft
  Office Excel. Both can be changed either by {javadoc "result.render.CSVRender#setCharset(java.nio.charset.Charset)"}
  and {javadoc "result.render.CSVRender#setDelimiter(char)"}. Also keep in mind that even <a href="http://www.openoffice.org/">Open Office</a>
  cannot have more than 1024 columns (Microsoft Office Excel 2003 has only 256, Microsoft Office Excel 2007 should be
  able to read about 15681 columns) so operation history might me trimmed if it is too long. See <a href="#fig1">figure
  1</a> for demo output.
</p>

{include "../fig.phtml", "url" => "csv-output.png", "url_thumb" => "csv-output_resize.png", "title" => "CSVRender output opened in Open Office Calc", "fig" => "1"}

<p>
  Below is example how to use {javadoc "result.render.CSVRender"}:
</p>

<pre class="brush: java;">
Solver solver = /* ... */

// Output to System.out
solver.addRender(new CSVRender());

// Output to file
solver.addRender(new CSVRender(new File("output-file.csv")));

// Output to directly specified OutputStream
solver.addRender(new CSVRender(System.out));

// ISO-8859-1 charset, ';' delimiter
CSVRender csvRender = new CSVRender();
csvRender.setDelimiter(';');
csvRender.setCharset(Charset.forName("ISO-8859-1"));
</pre>

<h3 id="exception-render">ExceptionRender</h3>

<p>
  {javadoc "result.render.ExceptionRender"} creates detailed report only about exceptions raised in solver iteration.
  Writes to console only and uses <a href="http://java.sun.com/javase/6/docs/api/java/lang/Throwable.html#printStackTrace()">
  Throwable#printStackTrace()</a> to print results. See below for example output.
</p>

<pre class="brush: plain;">
Problem Knapsack [line=9000 4 100 18 114 42 136 88 192 3 223]/Algorithm BreadthFirstSearch [] got Exception CannotContinueException
cz.cvut.felk.cig.jcop.algorithm.CannotContinueException: No more items in queue
	at cz.cvut.felk.cig.jcop.algorithm.graphsearch.GraphSearch.optimize(GraphSearch.java:44)
	at cz.cvut.felk.cig.jcop.solver.BaseSolver.optimize(BaseSolver.java:160)
	at cz.cvut.felk.cig.jcop.solver.SimpleSolver.run(SimpleSolver.java:44)
	at demopackage.DemoTemp.main(DemoTemp.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:110)
</pre>
<p class="fig-title">Example 1: {javadoc "result.render.ExceptionRender"} displaying exception in BFS while solving Knapsack problem.</p>

<p>
  Example how to use ExceptionRender:
</p>

<pre class="brush: java;">
Solver solver = /* ... */

solver.addRender(new ExceptionRender());
</pre>

<h3 id="jfree-chart-render">JFreeChartRender</h3>

<p>
  {javadoc "result.render.JFreeChartRender"} listens {javadoc "solver.Solver"} for any changes of best solution. If any
  is found (message {javadoc "solver.message.MessageBetterConfigurationFound"}) it adds one point to chart. Every
  solver iteration has its own plot line. X axis holds number of optimizations, Y axis fitness of best solution.
  {javadoc "result.render.JFreeChartRender"} uses <a href="http://www.jfree.org/jfreechart/">JFreeChart</a> library.
  See <a href="#fig2">figure 2</a> for how results from this render looks like.
</p>

{include "../fig.phtml", "url" => "jfreechart-output.png", "url_thumb" => "jfreechart-output_resize.png", "title" => "JFreeChartRender output when benchmarking 10 settings of Simulated Annealing on SAT problem", "fig" => "2"}

<p>
  Currently {javadoc "result.render.JFreeChartRender"} requires only a <code>title</code> as a parameter, co its usage
  is just this snippet:
</p>

<pre class="brush: java;">
Solver solver = /* ... */

solver.addListener(new JFreeChartRender("Demo JFreeChartRender"));
</pre>

<h3 id="simple-compare-render">SimpleCompareRender</h3>

<p>
  {javadoc "result.render.SimpleCompareRender"} makes simple comparison of results by their fitness and number of
  optimizations. This is useful to be able to see quickly which algorithm (or problem) performed better and which worse.
  It can write to console, <a href="http://java.sun.com/javase/6/docs/api/java/io/File.html">java.io.File</a> or any other
  <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintStream.html">java.io.PrintStream</a>. Result look like two
  tables, one sorted by fitness, the other by optimization counter. Below is example of render's output.
</p>

<pre class="brush: plain;">
Results sorted by fitness (DESC):
fitness    algorithm                               problem
7,0        SimulatedAnnealing [T=10.0, A=0.9]      SAT [valid-standard.cnf]
-2,0       SimulatedAnnealing [T=10.0, A=0.999]    SAT [valid-standard.cnf]
-3,0       BreadthFirstSearch []                   SAT [valid-standard.cnf]
-3,0       SimulatedAnnealing [T=100.0, A=0.999]   SAT [valid-standard.cnf]
-4,0       DepthFirstSearch []                     SAT [valid-standard.cnf]

Results sorted by optimizations (ASC):
optimiz.   algorithm                               problem
725        BreadthFirstSearch []                   SAT [valid-standard.cnf]
756        DepthFirstSearch []                     SAT [valid-standard.cnf]
2981       SimulatedAnnealing [T=10.0, A=0.999]    SAT [valid-standard.cnf]
3636       SimulatedAnnealing [T=10.0, A=0.9]      SAT [valid-standard.cnf]
3930       SimulatedAnnealing [T=100.0, A=0.999]   SAT [valid-standard.cnf]
</pre>
<p class="fig-title">Example 2: {javadoc "result.render.SimpleCompareRender"} rendering usage of different algorithms on SAT problem with 100ms timeout.</p>

<p>
  {javadoc "result.render.SimpleCompareRender"} can be added to solver this way:
</p>

<pre class="brush: java;">
Solver solver = /* ... */

// Output to console
solver.addRender(new SimpleCompareRender());

// Output to file
solver.addRender(new SimpleCompareRender(new File("output-file.txt")));

// Output to directly specified PrintStream
solver.addRender(new SimpleCompareRender(System.out));
</pre>

<h3 id="simple-render">SimpleRender</h3>

<p>
  {javadoc "result.render.SimpleRender"} is basic render of JCOP. It provides output to console,
  <a href="http://java.sun.com/javase/6/docs/api/java/io/File.html">java.io.File</a> or any other
  <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintStream.html">java.io.PrintStream</a>. It has three levels of
  details, {javadoc "result.render.SimpleRender#OUTPUT_STANDARD"} (which prints almost everything except operation
  history), {javadoc "result.render.SimpleRender#OUTPUT_MINI"} (which prints just time, number of optimizations, fitness,
  exception and best solution) and {javadoc "result.render.SimpleRender#OUTPUT_FULL"} (printing almost everything,
  including full result history). Below are examples of these three formats.
</p>

<pre class="brush: plain;">
=== Algorithm DepthFirstSearch [] used on problem SAT [valid-standard.cnf] ===
  CPU Time:                     110 [ms]
  System Time:                    1 [ms]
  User Time:                    109 [ms]
  Clock Time:                   125 [ms]
  Optimize counter:             511 [-]
  Optimize/sec (CPU):          4645 [1/s]
  Optimize/sec (Clock):        4088 [1/s]
  Best solution:         Configuration{!="{"}attributes=[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], operationHistory={!="{"}247 items}}
  Depth:                        247 [-]
  Fitness:                     -4,0 [-]
  Ended without exception
</pre>
<p class="fig-title">Example 3: {javadoc "result.render.SimpleRender"} using {javadoc "result.render.SimpleRender#OUTPUT_STANDARD"} output level to render DFS on SAT with 100ms timeout.</p>

<pre class="brush: plain;">
=== (DepthFirstSearch [], SAT [valid-standard.cnf]) ===
  CPU Time:     110 ms. Optimizations:     511. Fitness:    -4,0. Best solution: Configuration{!="{"}attributes=[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], operationHistory={!="{"}247 items}}. Ended without exception.
</pre>
<p class="fig-title">Example 4: {javadoc "result.render.SimpleRender"} using {javadoc "result.render.SimpleRender#OUTPUT_MINI"} output level to render DFS on SAT with 100ms timeout.</p>

<pre class="brush: plain;">

=== Algorithm DepthFirstSearch [] used on problem SAT [valid-standard.cnf] ===
  CPU Time:                     110 [ms]
  System Time:                    1 [ms]
  User Time:                    109 [ms]
  Clock Time:                   125 [ms]
  Optimize counter:             511 [-]
  Optimize/sec (CPU):          4645 [1/s]
  Optimize/sec (Clock):        4088 [1/s]
  Best solution: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1]
  Depth:                        247 [-]
  Fitness:                     -4,0 [-]
  Operation history:
           0. Empty SAT created
           1. SetTrueOperation{!="{"}index=19}
           2. SetTrueOperation{!="{"}index=18}
           3. SetTrueOperation{!="{"}index=17}
           4. SetFalseOperation{!="{"}index=19}
           5. SetTrueOperation{!="{"}index=16}
           ... ... ...
</pre>
<p class="fig-title">Example 5: {javadoc "result.render.SimpleRender"} using {javadoc "result.render.SimpleRender#OUTPUT_FULL"} output level to render DFS on SAT with 100ms timeout.</p>

<p>
  {javadoc "result.render.SimpleRender"} can be added to solver this way:
</p>

<pre class="brush: java;">
Solver solver = /* ... */

// Output standard info to console
solver.addRender(new SimpleRender(SimpleRender.OUTPUT_STANDARD));

// Output minimal info to specified PrintStream
solver.addRender(new SimpleRender(SimpleRender.OUTPUT_MINI, System.out));

// Output full into to file
solver.addRender(new SimpleRender(SimpleRender.OUTPUT_FULL, new File("output-file.txt")));
</pre>

<h3 id="xml-render">XMLRender</h3>

<p>
  {javadoc "result.render.XMLRender"} creates XML file with all possible information about results. Useful for
  automatized processing. Requires <a href="http://java.sun.com/javase/6/docs/api/java/io/File.html">java.io.File</a> to write
  into. Below is examples of result XML file (reformatted for easied read).
</p>

<pre class="brush: xml;">
&lt;?xml version="1.0" standalone="yes"?&gt;
&lt;result&gt;
  &lt;experiment date='Wed Mar 17 16:47:11 CET 2010'&gt;&lt;/experiment&gt;
  &lt;entry exception='CannotContinueException' clock-time='16' system-time='1' user-time='16' algorithm='BreadthFirstSearch []' cpu-time='15' optimize-counter='16' problem='Knapsack [line=9000 4 100 18 114 42 136 88 192 3 223]'&gt;
    &lt;best-solution fitness='473.0'&gt;
      &lt;operations&gt;
        &lt;operation index='0' label='Empty knapsack created'&gt;&lt;/operation&gt;
        &lt;operation index='1' label='AddOperation{!="{"}knapsackItem=KnapsackItem{!="{"}index=0, weight=18, price=114}}'&gt;&lt;/operation&gt;
        &lt;operation index='2' label='AddOperation{!="{"}knapsackItem=KnapsackItem{!="{"}index=1, weight=42, price=136}}'&gt;&lt;/operation&gt;
        &lt;operation index='3' label='AddOperation{!="{"}knapsackItem=KnapsackItem{!="{"}index=3, weight=3, price=223}}'&gt;&lt;/operation&gt;
      &lt;/operations&gt;
      &lt;attributes&gt;
        &lt;attribute index='0' value='1' human-readable-value='1'&gt;&lt;/attribute&gt;
        &lt;attribute index='1' value='1' human-readable-value='1'&gt;&lt;/attribute&gt;
        &lt;attribute index='2' value='0' human-readable-value='0'&gt;&lt;/attribute&gt;
        &lt;attribute index='3' value='1' human-readable-value='1'&gt;&lt;/attribute&gt;
      &lt;/attributes&gt;
    &lt;/best-solution&gt;
  &lt;/entry&gt;
&lt;/result&gt;
</pre>
<p class="fig-title">Example 6: {javadoc "result.render.XMLRender"} creates XML file for BFS used on Knapsack.</p>

<p>
  {javadoc "result.render.XMLRender"} is used as shown in following snippet:
</p>

<pre class="brush: java;">
Solver solver = /* ... */

solver.addRender(new XMLRender(new File("output-file.xml")));
</pre>